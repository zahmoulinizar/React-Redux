{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst taskSlice = createSlice({\n  name: \"Tasks\",\n  initialState: {\n    globalList: [],\n    filtredList: []\n  },\n  reducers: {\n    addTasks: (state, action) => {\n      state.Tasks.push(action.payload);\n    },\n    doneTask: (state, action) => {\n      state.Tasks.globalList.map(item => item.id === action.payload ? item.isdone = !item.isdone : item);\n      state.items.filtredList = state.items.globalList;\n    },\n    editTasks: (state, action) => {\n      state.Tasks.map(task => {\n        if (task.id === action.payload.id) {\n          task.description = action.payload.description;\n        }\n      });\n    },\n    filterByDone: (state, action) => {\n      state.items.filtredList = state.items.globalList.filter(task => task.isdone === action.payload);\n    },\n    reset: state => {\n      state.items.filtredList = state.items.globalList;\n    }\n  }\n});\nexport const {\n  addTasks,\n  editTasks,\n  filterByDone,\n  doneTask,\n  reset\n} = taskSlice.actions;\nexport default taskSlice.reducer;","map":{"version":3,"names":["createSlice","taskSlice","name","initialState","globalList","filtredList","reducers","addTasks","state","action","Tasks","push","payload","doneTask","map","item","id","isdone","items","editTasks","task","description","filterByDone","filter","reset","actions","reducer"],"sources":["C:/Users/Anwender/Desktop/my projects/GoMyCode/redux-chekpoint/React-redux/src/redux/taskSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst taskSlice = createSlice({\r\n  name: \"Tasks\",\r\n  initialState: {\r\n    globalList: [],\r\n    filtredList: [],\r\n  },\r\n  reducers: {\r\n    addTasks: (state, action) => {\r\n      state.Tasks.push(action.payload);\r\n    },\r\n    doneTask: (state, action) => {\r\n      state.Tasks.globalList.map((item) =>\r\n        item.id === action.payload ? (item.isdone = !item.isdone) : item\r\n      );\r\n      state.items.filtredList = state.items.globalList;\r\n    },\r\n    editTasks: (state, action) => {\r\n      state.Tasks.map((task) => {\r\n        if (task.id === action.payload.id) {\r\n          task.description = action.payload.description;\r\n        }\r\n      });\r\n    },\r\n    filterByDone: (state, action) => {\r\n      state.items.filtredList = state.items.globalList.filter(\r\n        (task) => task.isdone === action.payload\r\n      );\r\n    },\r\n    reset: (state) => {\r\n      state.items.filtredList = state.items.globalList;\r\n    },\r\n  },\r\n});\r\nexport const { addTasks, editTasks, filterByDone , doneTask , reset} = taskSlice.actions;\r\nexport default taskSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACE,KAAK,CAACC,IAAI,CAACF,MAAM,CAACG,OAAO,CAAC;IAClC,CAAC;IACDC,QAAQ,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACE,KAAK,CAACN,UAAU,CAACU,GAAG,CAAEC,IAAI,IAC9BA,IAAI,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO,GAAIG,IAAI,CAACE,MAAM,GAAG,CAACF,IAAI,CAACE,MAAM,GAAIF,IAAI,CACjE;MACDP,KAAK,CAACU,KAAK,CAACb,WAAW,GAAGG,KAAK,CAACU,KAAK,CAACd,UAAU;IAClD,CAAC;IACDe,SAAS,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACE,KAAK,CAACI,GAAG,CAAEM,IAAI,IAAK;QACxB,IAAIA,IAAI,CAACJ,EAAE,KAAKP,MAAM,CAACG,OAAO,CAACI,EAAE,EAAE;UACjCI,IAAI,CAACC,WAAW,GAAGZ,MAAM,CAACG,OAAO,CAACS,WAAW;QAC/C;MACF,CAAC,CAAC;IACJ,CAAC;IACDC,YAAY,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACU,KAAK,CAACb,WAAW,GAAGG,KAAK,CAACU,KAAK,CAACd,UAAU,CAACmB,MAAM,CACpDH,IAAI,IAAKA,IAAI,CAACH,MAAM,KAAKR,MAAM,CAACG,OAAO,CACzC;IACH,CAAC;IACDY,KAAK,EAAGhB,KAAK,IAAK;MAChBA,KAAK,CAACU,KAAK,CAACb,WAAW,GAAGG,KAAK,CAACU,KAAK,CAACd,UAAU;IAClD;EACF;AACF,CAAC,CAAC;AACF,OAAO,MAAM;EAAEG,QAAQ;EAAEY,SAAS;EAAEG,YAAY;EAAGT,QAAQ;EAAGW;AAAK,CAAC,GAAGvB,SAAS,CAACwB,OAAO;AACxF,eAAexB,SAAS,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}